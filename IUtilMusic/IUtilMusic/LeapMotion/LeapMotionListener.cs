using System;
using System.Linq;

using System.Collections.Generic;

using Leap;

using IUtilMusic.Gestures;
using IUtilMusic.Keyboard;

namespace IUtilMusic.LeapMotion
{   
    /// <summary>
    /// Listener of data generated by the Leap Motion device
    /// </summary>
    public class LeapMotionListener
    {
        #region Members
        /// <summary>
        /// List of all the gestures detector
        /// </summary>
        private List<GestureDetectorAbstract> _gesturesDetectorList;
        /// <summary>
        /// Instance of keyboard's listener
        /// </summary>
        private KeyboardListener _keyboardListener;
        #endregion

        #region Events
        /// <summary>
        /// Show informations about the device to end-user
        /// </summary>
        public event LeapMotionCustomEvents.LeapMotionEventHandler OnShowInformations; 
        #endregion

        #region Constructors
        /// <summary>
        /// Listener of data generated by the Leap Motion device 
        /// </summary>
        /// <param name="keyboardListener">Keyboard's listener to perform the events</param>
        public LeapMotionListener(KeyboardListener keyboardListener)
        {
            this._gesturesDetectorList = new List<GestureDetectorAbstract>();
            this._gesturesDetectorList.Add(new SwipeGestureDetector(GestureDetectorAbstract.Side.Right));
            this._gesturesDetectorList.Add(new OpenCloseGestureDetector(GestureDetectorAbstract.Side.Right));
            this._keyboardListener = keyboardListener;
        } 
        #endregion

        #region Public Events
        /// <summary>
        /// Event dispatched when the application has successfully 
        /// connected to the Leap Motion device
        /// </summary>
        /// <param name="sender">Controller whom executed this event</param>
        /// <param name="args">Arguments concerning the connection</param>
        /// <remarks>Represent Controller.Connect</remarks>
        public void OnServiceConnect(object sender, ConnectionEventArgs args)
        {
            Console.WriteLine("Service Connected");
        }

        /// <summary>
        /// Event dispatched when Leap motion device become available 
        /// (Either after the Connect event or when device plugged in)
        /// </summary>
        /// <param name="sender">Controller whom executed this event</param>
        /// <param name="args">Arguments concerning the device</param>
        /// <remarks>Represent Controller.Device</remarks>
        public void OnConnect(object sender, DeviceEventArgs args)
        {
            Console.WriteLine("Connected");
            if (OnShowInformations != null) OnShowInformations(this, new LeapMotionCustomEvents.LeapMotionArgs("You can now start to use IUtilMusic !"));
        }

        /// <summary>
        /// Event dispatched when a new tracking frame is available
        /// </summary>
        /// <param name="sender">Controller whom executed this event</param>
        /// <param name="args">Arguments concerning the current frame</param>
        /// <remarks>Represent Controller.FrameReady</remarks>
        public void OnFrame(object sender, FrameEventArgs args)
        {
            //Get the most recent frame and report some basic information
            Frame frame = args.frame;

            bool isValid = frame.Hands.Count() > 0;
            if (isValid)
            {
                foreach (GestureDetectorAbstract gestureDetector in _gesturesDetectorList)
                {
                    gestureDetector.RegisterFrame(frame);
                    if (gestureDetector.IsGestureValid()) gestureDetector.ExecuteGesture(_keyboardListener);
                    gestureDetector.ClearFrames();
                }
            }
        } 
        #endregion
    }
}

