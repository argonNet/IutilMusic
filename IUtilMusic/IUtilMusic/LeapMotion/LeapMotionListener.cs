using System;
using System.Linq;

using System.Collections.Generic;

using Leap;

using IUtilMusic.Gestures;
using IUtilMusic.Keyboard;

namespace IUtilMusic.LeapMotion
{
    /// <summary>
    /// Listener of data generated by the Leap Motion device
    /// </summary>
    public class LeapMotionListener
    {
        #region Members
        /// <summary>
        /// List of all the gestures detector
        /// </summary>
        private List<GestureDetectorAbstract> _gesturesDetectorList;
        /// <summary>
        /// Instance of keyboard's listener
        /// </summary>
        private KeyboardListener _keyboardListener;
        #endregion

        #region Events
        /// <summary>
        /// Show informations about the device to end-user
        /// </summary>
        public event LeapMotionCustomEvents.LeapMotionEventHandler OnShowInformations;

        /// <summary>
        /// Fire when the device connection's state has been changed
        /// </summary>
        public event LeapMotionCustomEvents.LeapMotionDeviceEventHandler OnDeviceConnectionStateChanged;
        #endregion

        #region Constructors
        /// <summary>
        /// Listener of data generated by the Leap Motion device 
        /// </summary>
        /// <param name="keyboardListener">Keyboard's listener to perform the events</param>
        public LeapMotionListener(KeyboardListener keyboardListener)
        {
            PinchGestureDetector pinchGesture = new PinchGestureDetector(GestureDetectorAbstract.Side.Right);
            this._gesturesDetectorList = new List<GestureDetectorAbstract>();
            this._gesturesDetectorList.Add(new SwipeGestureDetector(GestureDetectorAbstract.Side.Right));
            this._gesturesDetectorList.Add(new OpenCloseGestureDetector(GestureDetectorAbstract.Side.Right));
            this._gesturesDetectorList.Add(pinchGesture);
            this._gesturesDetectorList.Add(new UpDownGestureDetector(GestureDetectorAbstract.Side.Right, pinchGesture));
            this._keyboardListener = keyboardListener;      
        }
        #endregion

        #region Public Events
        /// <summary>
        /// Event dispatched when the application has successfully 
        /// connected to the Leap Motion service
        /// </summary>
        /// <param name="sender">Controller whom executed this event</param>
        /// <param name="args">Arguments concerning the connection</param>
        /// <remarks>Represent Controller.Connect</remarks>
        public void OnServiceConnect(object sender, ConnectionEventArgs args)
        {
          
        }

        /// <summary>
        /// Event dispatched when the controller has lost its connection 
        /// to the Leap Motion service
        /// </summary>
        /// <param name="sender">Controller whom executed this event</param>
        /// <param name="args">Arguments concerning the connection</param>
        public void OnServiceDisconnect(object sender, ConnectionLostEventArgs args)
        {
            if (OnShowInformations != null) OnShowInformations(this, new LeapMotionCustomEvents.LeapMotionArgs("Leap Motion service disconnected..."));
        }


        /// <summary>
        /// Event dispatched when Leap motion device become available 
        /// (Either after the Connect event or when device plugged in)
        /// </summary>
        /// <param name="sender">Controller whom executed this event</param>
        /// <param name="args">Arguments concerning the device</param>
        /// <remarks>Represent Controller.Device</remarks>
        public void OnConnect(object sender, DeviceEventArgs args)
        {
           if (OnShowInformations != null) OnShowInformations(this, new LeapMotionCustomEvents.LeapMotionArgs("You can now start to use UtilMusic !"));
           if (OnDeviceConnectionStateChanged != null) OnDeviceConnectionStateChanged(this, new LeapMotionCustomEvents.LeapMotionDeviceConnectionArgs(true));
        }

        /// <summary>
        /// Event dispatched when the Leap Motion Controller is removed or disconnected
        /// </summary>
        /// <param name="sender">Controller whom executed this event</param>
        /// <param name="args">Arguments concerning the device</param>
        public void OnDisconnect(object sender, DeviceEventArgs args)
        {
            if (OnShowInformations != null) OnShowInformations(this, new LeapMotionCustomEvents.LeapMotionArgs("Leap Motion Controller has been disconnected"));
            if (OnDeviceConnectionStateChanged != null) OnDeviceConnectionStateChanged(this, new LeapMotionCustomEvents.LeapMotionDeviceConnectionArgs(false));
        }


        /// <summary>
        /// Event dispatched when the Leap Motion Controller fails to initialize
        /// </summary>
        /// <param name="sender">Controller whom executed this event</param>
        /// <param name="args">Arguments concerning the device</param>
        public void OnDeviceFailure(object sender, DeviceFailureEventArgs args)
        {
            Console.WriteLine("Device Error");
            Console.WriteLine("  PNP ID:" + args.DeviceSerialNumber);
            Console.WriteLine("  Failure message:" + args.ErrorMessage);
            if (OnShowInformations != null) OnShowInformations(this, new LeapMotionCustomEvents.LeapMotionArgs(String.Format("Leap Motion Controller Error: \r\n" +
                                                                                                                              "PNP ID: {0} \r\n" +
                                                                                                                              "Failure message: {1}",
                                                                                                                              args.DeviceSerialNumber, args.ErrorMessage)));
        }

        /// <summary>
        /// Event dispatched when the system generates a loggable event
        ///  TODO: Store info on  a log text file
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        public void OnLogMessage(object sender, LogEventArgs args)
        {
            string errorLevel = "Unknown";
            switch (args.severity)
            {
                case Leap.MessageSeverity.MESSAGE_CRITICAL:
                    errorLevel = "Critical";
                    break;
                case Leap.MessageSeverity.MESSAGE_WARNING:
                    errorLevel = "Warning";
                    break;
                case Leap.MessageSeverity.MESSAGE_INFORMATION:
                    errorLevel = "Info";
                    break;
                case Leap.MessageSeverity.MESSAGE_UNKNOWN:
                    errorLevel = "Unknown";
                    break;
            }

            Console.WriteLine("{0}: [{1}] {2}",errorLevel, args.timestamp, args.message);
        }


        /// <summary>
        /// Event dispatched when a new tracking frame is available
        /// </summary>
        /// <param name="sender">Controller whom executed this event</param>
        /// <param name="args">Arguments concerning the current frame</param>
        /// <remarks>Represent Controller.FrameReady</remarks>
        public void OnFrame(object sender, FrameEventArgs args)
        {
            //Get the most recent frame and report some basic information
            Frame frame = args.frame;

            bool isValid = frame.Hands.Count() > 0;
            if (isValid)
            {
                foreach (GestureDetectorAbstract gestureDetector in _gesturesDetectorList)
                {
                    gestureDetector.RegisterFrame(frame);
                    if (gestureDetector.IsGestureValid()) gestureDetector.ExecuteGesture(_keyboardListener);
                    gestureDetector.ClearFrames();
                }
            }
        }
        #endregion
    }
}

